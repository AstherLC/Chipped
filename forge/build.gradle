plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

sourceSets {
    main {
        resources {
            srcDirs += project(":forge").file("src/generated/resources").absolutePath
            exclude '.cache'
        }
    }
}

loom {
    forge {
        dataGen {
            mod project.mod_id
        }
    }
    runs {
        data {
            programArgs "--existing", project(":common").file("src/main/resources").absolutePath
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.minecraft_version-$rootProject.forge_version"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    modImplementation "team.chisel.ctm:CTM:$minecraft_version-$ctm_version"

    modCompileOnly "mezz.jei:jei-$rootProject.minecraft_version-forge-api:$rootProject.jei_version"
    modLocalRuntime("mezz.jei:jei-$rootProject.minecraft_version-forge:$rootProject.jei_version") { transitive = false }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    filesMatching("META-INF/mods.toml") {
        expand "version": rootProject.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
    archivesBaseName = "$mod_id-forge-$minecraft_version"
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

def ENV = System.getenv()

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }
}